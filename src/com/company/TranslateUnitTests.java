package com.company;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class TranslateUnitTests {
    @Test
    void GivenWordShouldTranslateThenReturnAtLeastOneCharacter()
    {
        String plaintext = "code";
        String plainAlphabet = "The quick brown fox jumps over the lazy dog";
        String binaryAlphabet = "000001011110110010100010000000111110101001010100100100101000000000110000111010101010010111101110000000110100101010101101000000010110101001101100111100011100000000101010111001100010111010000000011110110010100010000000111000100000101011101111000000100110101010110110";
        Translator translator = new Translator(new Alphabet(plainAlphabet, binaryAlphabet));
        String result = translator.TranslateEnglishToBraille(plaintext);
        Assertions.assertTrue(translator.TranslateEnglishToBraille(plaintext).length() > 0);
    }
    @Test
    void GivenTheSentenceShouldTranslateToBinaryBraille()
    {
        String plaintext = "The quick brown fox jumps over the lazy dog";
        String plainAlphabet = "The quick brown fox jumps over the lazy dog";
        String binaryAlphabet = "000001011110110010100010000000111110101001010100100100101000000000110000111010101010010111101110000000110100101010101101000000010110101001101100111100011100000000101010111001100010111010000000011110110010100010000000111000100000101011101111000000100110101010110110";
        Translator translator = new Translator(new Alphabet(plainAlphabet, binaryAlphabet));
        String result = translator.TranslateEnglishToBraille(plaintext);
        Assertions.assertEquals("000001011110110010100010000000111110101001010100100100101000000000110000111010101010010111101110000000110100101010101101000000010110101001101100111100011100000000101010111001100010111010000000011110110010100010000000111000100000101011101111000000100110101010110110"
                , result);
    }
    @Test
    void GivenAStringWithNumberShouldThrowExceptionWhenTranslating()
    {
        String plainAlphabet = "The quick brown fox jumps over the lazy dog";
        String binaryAlphabet = "000001011110110010100010000000111110101001010100100100101000000000110000111010101010010111101110000000110100101010101101000000010110101001101100111100011100000000101010111001100010111010000000011110110010100010000000111000100000101011101111000000100110101010110110";
        Translator translator = new Translator(new Alphabet(plainAlphabet, binaryAlphabet));
        Exception exception = Assertions.assertThrows(IllegalArgumentException.class, () -> {
            translator.TranslateEnglishToBraille("12223245");
        });
    }
    @Test
    void GivenAStringTooLongShouldThrowExceptionWhenTranslating()
    {
        String plainAlphabet = "The quick brown fox jumps over the lazy dog";
        String binaryAlphabet = "000001011110110010100010000000111110101001010100100100101000000000110000111010101010010111101110000000110100101010101101000000010110101001101100111100011100000000101010111001100010111010000000011110110010100010000000111000100000101011101111000000100110101010110110";
        Translator translator = new Translator(new Alphabet(plainAlphabet, binaryAlphabet));
        Exception exception = Assertions.assertThrows(IllegalArgumentException.class, () -> {
            translator.TranslateEnglishToBraille
        });
    }
    @Test
    void GivenTwoAPlainStringAndABrailleStringShouldFormAlphabetOf28Chars()
    {
        Alphabet alphabet = new Alphabet("The quick brown fox jumps over the lazy dog","000001011110110010100010000000111110101001010100100100101000000000110000111010101010010111101110000000110100101010101101000000010110101001101100111100011100000000101010111001100010111010000000011110110010100010000000111000100000101011101111000000100110101010110110");
        final int SIZE_OF_DICTIONARY = 27;
        Assertions.assertEquals(SIZE_OF_DICTIONARY, alphabet.englishToBrailleDictionary.size());
    }

}
